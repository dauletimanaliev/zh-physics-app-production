import React, { useState, useEffect } from 'react';
import apiClient from '../services/apiClient';
import PhotoQuestionUpload from './PhotoQuestionUpload';
import './PhysicsTestSystem.css';

const PhysicsTestSystem = () => {
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [userAnswer, setUserAnswer] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [showResult, setShowResult] = useState(false);
  const [testHistory, setTestHistory] = useState([]);
  const [score, setScore] = useState(0);
  const [questionCount, setQuestionCount] = useState(0);
  const [mode, setMode] = useState('test'); // 'test' or 'photo'

  const generateQuestion = async (selectedTopic = null, selectedDifficulty = null) => {
    setIsGenerating(true);
    setShowResult(false);
    setUserAnswer('');
    
    try {
      console.log('ü§ñ Generating AI physics question...');
      
      // Call AI API to generate physics question with filters
      const response = await apiClient.generateAIQuestion({
        topic: selectedTopic,
        difficulty: selectedDifficulty,
        language: 'ru'
      });
      
      console.log('‚úÖ AI Question generated:', response);
      setCurrentQuestion(response.question);
      setQuestionCount(prev => prev + 1);
      
    } catch (error) {
      console.error('‚ùå Error generating question:', error);
      // Fallback to a default question with multiple choice
      setCurrentQuestion({
        text: "–ö–∞–∫–∞—è —Å–∏–ª–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ç–µ–ª–æ –º–∞—Å—Å–æ–π 2 –∫–≥ –ø—Ä–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–∏ 3 –º/—Å¬≤?",
        type: "multiple_choice",
        options: ["4 –ù", "6 –ù", "8 –ù", "10 –ù"],
        correct_answer: "6 –ù",
        explanation: "–ü–æ –≤—Ç–æ—Ä–æ–º—É –∑–∞–∫–æ–Ω—É –ù—å—é—Ç–æ–Ω–∞: F = ma = 2 –∫–≥ √ó 3 –º/—Å¬≤ = 6 –ù",
        topic: "–ú–µ—Ö–∞–Ω–∏–∫–∞",
        difficulty: "easy"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const submitAnswer = async () => {
    if (!userAnswer.trim()) return;
    
    try {
      console.log('üìù Submitting answer:', userAnswer);
      
      // Enhanced answer checking with AI explanation
      const response = await apiClient.checkAnswer({
        question_id: currentQuestion.id || 'generated',
        question_text: currentQuestion.text,
        user_answer: userAnswer,
        correct_answer: currentQuestion.correct_answer,
        question_type: currentQuestion.type,
        options: currentQuestion.options,
        topic: currentQuestion.topic,
        difficulty: currentQuestion.difficulty
      });
      
      console.log('‚úÖ Answer checked:', response);
      
      const historyItem = {
        question: currentQuestion.text,
        user_answer: userAnswer,
        correct_answer: currentQuestion.correct_answer,
        is_correct: response.is_correct,
        explanation: response.explanation || currentQuestion.explanation,
        ai_feedback: response.ai_feedback || null
      };
      
      setTestHistory(prev => [...prev, historyItem]);
      
      if (response.is_correct) {
        setScore(prev => prev + 1);
      }
      
      setShowResult(true);
      
    } catch (error) {
      console.error('‚ùå Error checking answer:', error);
      // Enhanced fallback answer checking
      const isCorrect = userAnswer.toLowerCase().trim() === currentQuestion.correct_answer.toLowerCase().trim();
      
      const historyItem = {
        question: currentQuestion.text,
        user_answer: userAnswer,
        correct_answer: currentQuestion.correct_answer,
        is_correct: isCorrect,
        explanation: currentQuestion.explanation,
        ai_feedback: isCorrect ? 
          "–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª–∏ –∑–∞–¥–∞—á—É." : 
          `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.correct_answer}. ${currentQuestion.explanation}`
      };
      
      setTestHistory(prev => [...prev, historyItem]);
      
      if (isCorrect) {
        setScore(prev => prev + 1);
      }
      
      setShowResult(true);
    }
  };

  const resetTest = () => {
    setCurrentQuestion(null);
    setUserAnswer('');
    setShowResult(false);
    setTestHistory([]);
    setScore(0);
    setQuestionCount(0);
  };

  const handleQuestionCreated = (newQuestion) => {
    console.log('üì∏ New virtual question created:', newQuestion);
    // Could switch to test mode and load this question
    setMode('test');
    setCurrentQuestion(newQuestion);
  };

  return (
    <div className="physics-test-system">
      <div className="test-header">
        <h1>üß™ –§–∏–∑–∏–∫–∞ —Å –ò–ò</h1>
        
        {/* Mode Selector */}
        <div className="mode-selector">
          <button 
            className={`mode-btn ${mode === 'test' ? 'active' : ''}`}
            onClick={() => setMode('test')}
          >
            ü§ñ –ò–ò –¢–µ—Å—Ç—ã
          </button>
          <button 
            className={`mode-btn ${mode === 'photo' ? 'active' : ''}`}
            onClick={() => setMode('photo')}
          >
            üì∏ –§–æ—Ç–æ ‚Üí –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
          </button>
        </div>

        {mode === 'test' && (
          <div className="test-stats">
            <div className="stat">
              <span className="stat-value">{score}</span>
              <span className="stat-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö</span>
            </div>
            <div className="stat">
              <span className="stat-value">{questionCount}</span>
              <span className="stat-label">–í–æ–ø—Ä–æ—Å–æ–≤</span>
            </div>
            <div className="stat">
              <span className="stat-value">{questionCount > 0 ? Math.round((score / questionCount) * 100) : 0}%</span>
              <span className="stat-label">–¢–æ—á–Ω–æ—Å—Ç—å</span>
            </div>
          </div>
        )}
      </div>

      {/* Photo Upload Mode */}
      {mode === 'photo' && (
        <PhotoQuestionUpload onQuestionCreated={handleQuestionCreated} />
      )}


      {/* Test Mode */}
      {mode === 'test' && (
        <>
          {isGenerating ? (
            <div className="loading-container">
              <div className="ai-loading">
                <div className="ai-brain">ü§ñ</div>
                <div className="loading-dots">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
              <h3>–ò–ò –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–∑–∏–∫–µ...</h3>
              <p>–°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å</p>
            </div>
          ) : currentQuestion ? (
            <div className="question-container">
              <div className="question-header">
                <span className="question-topic">{currentQuestion.topic || '–§–∏–∑–∏–∫–∞'}</span>
                <span className="question-difficulty">{currentQuestion.difficulty || 'medium'}</span>
              </div>
              
              <div className="question-content">
                <h2>{currentQuestion.text}</h2>
                
                {currentQuestion.image && (
                  <div className="question-image">
                    <img src={currentQuestion.image} alt="–ì—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞" />
                  </div>
                )}
                
                {currentQuestion.formula && (
                  <div className="question-formula">
                    <code>{currentQuestion.formula}</code>
                  </div>
                )}
              </div>

              {!showResult ? (
                <div className="answer-section">
                  {/* Topic and Difficulty Selector */}
                  <div className="question-filters">
                    <div className="filter-group">
                      <label>üìö –¢–µ–º–∞:</label>
                      <select className="filter-select">
                        <option value="">–õ—é–±–∞—è —Ç–µ–º–∞</option>
                        <option value="mechanics">üöÄ –ú–µ—Ö–∞–Ω–∏–∫–∞</option>
                        <option value="electricity">‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ</option>
                        <option value="thermodynamics">üå°Ô∏è –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞</option>
                        <option value="optics">üîç –û–ø—Ç–∏–∫–∞</option>
                        <option value="quantum">‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞</option>
                      </select>
                    </div>
                    <div className="filter-group">
                      <label>üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å:</label>
                      <select className="filter-select">
                        <option value="">–õ—é–±–∞—è</option>
                        <option value="easy">üü¢ –õ–µ–≥–∫–æ</option>
                        <option value="medium">üü° –°—Ä–µ–¥–Ω–µ</option>
                        <option value="hard">üî¥ –°–ª–æ–∂–Ω–æ</option>
                      </select>
                    </div>
                  </div>

                  {currentQuestion.type === 'multiple_choice' && currentQuestion.options ? (
                    <div className="multiple-choice">
                      {currentQuestion.options.map((option, index) => (
                        <button
                          key={index}
                          className={`option-btn ${userAnswer === option ? 'selected' : ''}`}
                          onClick={() => setUserAnswer(option)}
                        >
                          {String.fromCharCode(65 + index)}. {option}
                        </button>
                      ))}
                    </div>
                  ) : (
                    <div className="text-answer">
                      <input
                        type="text"
                        value={userAnswer}
                        onChange={(e) => setUserAnswer(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                        className="answer-input"
                        onKeyPress={(e) => e.key === 'Enter' && submitAnswer()}
                      />
                    </div>
                  )}

                  <button 
                    onClick={submitAnswer} 
                    className="submit-btn"
                    disabled={!userAnswer.trim()}
                  >
                    ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç
                  </button>
                </div>
              ) : (
                <div className="result-section">
                  <div className={`result-card ${testHistory[testHistory.length - 1]?.is_correct ? 'correct' : 'incorrect'}`}>
                    <div className="result-icon">
                      {testHistory[testHistory.length - 1]?.is_correct ? 'üéâ' : '‚ùå'}
                    </div>
                    <h3>
                      {testHistory[testHistory.length - 1]?.is_correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}
                    </h3>
                    <p><strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong> {userAnswer}</p>
                    <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</strong> {currentQuestion.correct_answer}</p>
                    {testHistory[testHistory.length - 1]?.ai_feedback && (
                      <div className="ai-feedback">
                        <h4>ü§ñ –ò–ò –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</h4>
                        <p>{testHistory[testHistory.length - 1].ai_feedback}</p>
                      </div>
                    )}
                    {testHistory[testHistory.length - 1]?.explanation && (
                      <div className="explanation">
                        <h4>üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</h4>
                        <p>{testHistory[testHistory.length - 1].explanation}</p>
                      </div>
                    )}
                  </div>
                  
                  <div className="next-actions">
                    <button onClick={generateQuestion} className="next-btn">
                      üé≤ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    </button>
                    <button onClick={resetTest} className="reset-btn">
                      üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                    </button>
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="no-question">
              <h3>–ì–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç—É –ø–æ —Ñ–∏–∑–∏–∫–µ?</h3>
              <button onClick={generateQuestion} className="start-btn">
                üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
              </button>
            </div>
          )}

          {testHistory.length > 0 && (
            <div className="test-history">
              <h3>üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤</h3>
              <div className="history-list">
                {testHistory.slice(-3).map((item, index) => (
                  <div key={index} className={`history-item ${item.is_correct ? 'correct' : 'incorrect'}`}>
                    <div className="history-icon">
                      {item.is_correct ? '‚úÖ' : '‚ùå'}
                    </div>
                    <div className="history-content">
                      <p className="history-question">{item.question}</p>
                      <p className="history-answer">
                        <strong>–í–∞—à –æ—Ç–≤–µ—Ç:</strong> {item.user_answer}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default PhysicsTestSystem;
