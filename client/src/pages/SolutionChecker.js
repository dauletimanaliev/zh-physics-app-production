import React, { useState, useRef, useEffect } from 'react';
import apiClient from '../services/apiClient';
import './SolutionChecker.css';

const SolutionChecker = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState(null);
  const [recentAnalyses, setRecentAnalyses] = useState([]);
  const fileInputRef = useRef(null);

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file && file.type.startsWith('image/')) {
      setSelectedFile(file);
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setPreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleDrop = (event) => {
    event.preventDefault();
    const file = event.dataTransfer.files[0];
    if (file && file.type.startsWith('image/')) {
      setSelectedFile(file);
      
      const reader = new FileReader();
      reader.onload = (e) => {
        setPreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleDragOver = (event) => {
    event.preventDefault();
  };

  const analyzeSolution = async () => {
    if (!selectedFile) return;

    setIsAnalyzing(true);
    try {
      console.log('üîç Analyzing solution with AI...');
      
      const response = await apiClient.checkSolutionPhoto(selectedFile);
      
      if (response.success) {
        setAnalysis(response.analysis);
        console.log('‚úÖ Solution analyzed successfully:', response.analysis);
        
        // Add to recent analyses
        setRecentAnalyses(prev => [response.analysis, ...prev.slice(0, 4)]);
        
        // Load updated analyses
        loadRecentAnalyses();
      }
    } catch (error) {
      console.error('‚ùå Error analyzing solution:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const clearSelection = () => {
    setSelectedFile(null);
    setPreview(null);
    setAnalysis(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const loadRecentAnalyses = async () => {
    try {
      const response = await apiClient.getSolutionAnalyses();
      setRecentAnalyses(response.analyses || []);
    } catch (error) {
      console.error('‚ùå Error loading analyses:', error);
    }
  };

  useEffect(() => {
    loadRecentAnalyses();
  }, []);

  const getScoreColor = (score) => {
    if (score >= 90) return '#4CAF50';
    if (score >= 70) return '#FF9800';
    return '#F44336';
  };

  const getGradeEmoji = (grade) => {
    if (grade === '–û—Ç–ª–∏—á–Ω–æ') return 'üéâ';
    if (grade === '–ï—Å—Ç—å –æ—à–∏–±–∫–∏') return '‚ö†Ô∏è';
    return '‚ùå';
  };

  return (
    <div className="solution-checker">
      <div className="checker-header">
        <h2>üîç –ò–ò –ü—Ä–æ–≤–µ—Ä–∫–∞ –†–µ—à–µ–Ω–∏–π</h2>
        <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
      </div>

      <div className="upload-section">
        {!selectedFile ? (
          <div 
            className="drop-zone"
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onClick={() => fileInputRef.current?.click()}
          >
            <div className="drop-zone-content">
              <div className="upload-icon">üì∏</div>
              <h3>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è</h3>
              <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
              <p className="file-hint">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, HEIC</p>
            </div>
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleFileSelect}
              style={{ display: 'none' }}
            />
          </div>
        ) : (
          <div className="preview-container">
            <img src={preview} alt="Preview" className="photo-preview" />
            <div className="preview-overlay">
              <button onClick={clearSelection} className="clear-btn">
                ‚úï –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
            <div className="upload-actions">
              <button 
                onClick={analyzeSolution} 
                disabled={isAnalyzing}
                className="analyze-btn"
              >
                {isAnalyzing ? (
                  <>
                    <div className="spinner"></div>
                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ—à–µ–Ω–∏–µ...
                  </>
                ) : (
                  'ü§ñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ'
                )}
              </button>
            </div>
          </div>
        )}
      </div>

      {analysis && (
        <div className="analysis-result">
          <div className="result-header">
            <h3>{getGradeEmoji(analysis.overall_grade)} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h3>
            <div className="score-badge" style={{ backgroundColor: getScoreColor(analysis.score) }}>
              {analysis.score}/100
            </div>
          </div>

          {analysis.original_photo && (
            <div className="original-solution">
              <h4>üìù –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:</h4>
              <img 
                src={analysis.original_photo} 
                alt="–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ" 
                className="solution-image"
              />
            </div>
          )}

          <div className="analysis-details">
            <div className="overall-feedback">
              <h4>üìã –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {analysis.overall_grade}</h4>
              <p className="feedback-text">{analysis.feedback}</p>
              <div className="confidence">
                –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò: {Math.round(analysis.confidence * 100)}%
              </div>
            </div>

            <div className="detailed-check">
              <h4>üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</h4>
              <div className="check-items">
                {Object.entries(analysis.detailed_analysis).map(([key, value]) => (
                  <div key={key} className="check-item">
                    <span className="check-result">{value}</span>
                  </div>
                ))}
              </div>
            </div>

            {analysis.suggestions && analysis.suggestions.length > 0 && (
              <div className="suggestions">
                <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                <ul>
                  {analysis.suggestions.map((suggestion, index) => (
                    <li key={index}>{suggestion}</li>
                  ))}
                </ul>
              </div>
            )}

            <div className="ai-info">
              <small>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analysis.ai_model}</small>
            </div>
          </div>
        </div>
      )}

      <div className="new-check-actions">
        <button onClick={clearSelection} className="new-check-btn">
          üì∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        </button>
      </div>

      {recentAnalyses.length > 0 && (
        <div className="recent-analyses">
          <h3>üìö –ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({recentAnalyses.length})</h3>
          <div className="analyses-grid">
            {recentAnalyses.slice(0, 6).map((analysisItem, index) => (
              <div key={analysisItem.id} className="analysis-card">
                {analysisItem.original_photo && (
                  <div className="card-photo">
                    <img 
                      src={analysisItem.original_photo} 
                      alt="–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ" 
                      className="card-solution-image"
                    />
                  </div>
                )}
                <div className="card-content">
                  <div className="card-header">
                    <span className="card-grade">{analysisItem.overall_grade}</span>
                    <span 
                      className="card-score"
                      style={{ backgroundColor: getScoreColor(analysisItem.score) }}
                    >
                      {analysisItem.score}/100
                    </span>
                  </div>
                  <p className="card-feedback">
                    {analysisItem.feedback.substring(0, 80)}...
                  </p>
                  <div className="card-footer">
                    <span className="checked-badge">
                      {analysisItem.is_correct ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' : '‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏'}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SolutionChecker;
