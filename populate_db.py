import asyncio
import aiosqlite
import random
from datetime import datetime, timedelta
from database import Database

async def populate_database():
    """Populate database with realistic test data"""
    db_path = "ent_bot.db"
    
    # Initialize database with proper schema
    db_instance = Database(db_path)
    await db_instance.init_db()
    print("‚úÖ Database schema initialized")
    
    async with aiosqlite.connect(db_path) as db:
        # Clear existing data (tables should exist now)
        try:
            await db.execute("DELETE FROM users")
            await db.execute("DELETE FROM materials") 
            await db.execute("DELETE FROM tests")
            await db.execute("DELETE FROM quests")
            await db.execute("DELETE FROM schedule")
            await db.execute("DELETE FROM user_progress")
            print("üßπ Cleared existing data")
        except Exception as e:
            print(f"Note: {e} (this is normal for new database)")
        
        # Add realistic users (students and teachers) - realistic class size
        students = [
            (1001, "aidar_k", "–ê–π–¥–∞—Ä", "–ö–∞—Å—ã–º–æ–≤", "ru", random.randint(800, 2500), random.randint(3, 12)),
            (1002, "aliya_m", "–ê–ª–∏—è", "–ú—É—Ö–∞–º–µ–¥–æ–≤–∞", "kz", random.randint(600, 2200), random.randint(2, 10)),
            (1003, "daniiar_s", "–î–∞–Ω–∏—è—Ä", "–°–∞—Ä—Å–µ–Ω–æ–≤", "ru", random.randint(1200, 3000), random.randint(5, 15)),
            (1004, "aigul_n", "–ê–π–≥—É–ª—å", "–ù—É—Ä–ª–∞–Ω–æ–≤–∞", "kz", random.randint(900, 2400), random.randint(4, 11)),
            (1005, "arman_t", "–ê—Ä–º–∞–Ω", "–¢–æ–∫—Ç–∞—Ä–æ–≤", "ru", random.randint(700, 2000), random.randint(3, 9)),
            (1006, "amina_b", "–ê–º–∏–Ω–∞", "–ë–µ–∫–æ–≤–∞", "kz", random.randint(1100, 2800), random.randint(6, 13)),
            (1007, "nurlan_k", "–ù—É—Ä–ª–∞–Ω", "–ö–∞–ª–∏–µ–≤", "ru", random.randint(850, 2300), random.randint(4, 10)),
            (1008, "aida_zh", "–ê–∏–¥–∞", "–ñ–∞–Ω–±–µ–∫–æ–≤–∞", "kz", random.randint(950, 2600), random.randint(5, 12)),
            (1009, "bauyrzhan_a", "–ë–∞—É—ã—Ä–∂–∞–Ω", "–ê–ª–∏–º–æ–≤", "kz", random.randint(1300, 2900), random.randint(7, 14)),
            (1010, "diana_s", "–î–∏–∞–Ω–∞", "–°—É–ª–µ–π–º–µ–Ω–æ–≤–∞", "ru", random.randint(800, 2100), random.randint(3, 8)),
            (1011, "erlan_m", "–ï—Ä–ª–∞–Ω", "–ú—É—Å–∞–µ–≤", "kz", random.randint(1000, 2700), random.randint(5, 11)),
            (1012, "gulnara_k", "–ì—É–ª—å–Ω–∞—Ä–∞", "–ö–µ–Ω–∂–µ–±–∞–µ–≤–∞", "ru", random.randint(750, 2200), random.randint(4, 9)),
            (1013, "islam_b", "–ò—Å–ª–∞–º", "–ë–∞–π—Ç–µ–Ω–æ–≤", "kz", random.randint(1150, 2500), random.randint(6, 12)),
            (1014, "kamila_t", "–ö–∞–º–∏–ª–∞", "–¢–µ–º–∏—Ä–æ–≤–∞", "ru", random.randint(900, 2400), random.randint(4, 10)),
            (1015, "madina_a", "–ú–∞–¥–∏–Ω–∞", "–ê–±–¥—É–ª–ª–∞–µ–≤–∞", "kz", random.randint(1250, 2800), random.randint(7, 13)),
            (1016, "askar_zh", "–ê—Å“õ–∞—Ä", "–ñ“±–º–∞–±–µ–∫–æ–≤", "kz", random.randint(950, 2300), random.randint(5, 10)),
            (1017, "zhanel_s", "–ñ–∞–Ω–µ–ª—å", "–°–∞–ø–∞—Ä–æ–≤–∞", "ru", random.randint(1100, 2600), random.randint(6, 12)),
            (1018, "timur_a", "–¢–∏–º—É—Ä", "–ê—Ö–º–µ—Ç–æ–≤", "kz", random.randint(800, 2200), random.randint(4, 9)),
            (1019, "samal_k", "–°–∞–º–∞–ª", "“ö–∞—Å—ã–º–æ–≤–∞", "kz", random.randint(1200, 2700), random.randint(7, 13)),
            (1020, "ruslan_b", "–†—É—Å–ª–∞–Ω", "–ë–µ–π—Å–µ–Ω–æ–≤", "ru", random.randint(900, 2400), random.randint(5, 11)),
            (1021, "aizhan_t", "–ê–π–∂–∞–Ω", "–¢”©–ª–µ—É–æ–≤–∞", "kz", random.randint(1050, 2500), random.randint(6, 12)),
            (1022, "damir_n", "–î–∞–º–∏—Ä", "–ù“±—Ä“ì–∞–ª–∏–µ–≤", "kz", random.randint(850, 2300), random.randint(4, 10)),
            (1023, "laura_m", "–õ–∞—É—Ä–∞", "–ú“±—Ä–∞—Ç–æ–≤–∞", "ru", random.randint(1150, 2600), random.randint(7, 14)),
            (1024, "adil_s", "”ò–¥—ñ–ª", "–°–µ–π—ñ—Ç–æ–≤", "kz", random.randint(950, 2400), random.randint(5, 11)),
            (1025, "assel_k", "”ò—Å–µ–ª", "“ö–∞–π—Ä–∞—Ç–æ–≤–∞", "kz", random.randint(1000, 2500), random.randint(6, 12)),
        ]
        
        teachers = [
            (2001, "teacher_physics", "–ê—Å–µ–º", "–ò–±—Ä–∞–≥–∏–º–æ–≤–∞", "ru", 5000, 20),
            (2002, "director_school", "–ú–∞—Ä–∞—Ç", "–°–µ–π—Ç–∫–∞–∑–∏–µ–≤", "kz", 6000, 25),
        ]
        
        # Insert users
        for user_data in students + teachers:
            telegram_id, username, first_name, last_name, language, points, level = user_data
            await db.execute("""
                INSERT INTO users (telegram_id, username, first_name, last_name, language, points, level, registration_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (telegram_id, username, first_name, last_name, language, points, level, datetime.now().isoformat()))
        
        # Add physics materials
        materials = [
            ("–§–∏–∑–∏–∫–∞", "–ú–µ—Ö–∞–Ω–∏–∫–∞", "video", "–û—Å–Ω–æ–≤—ã –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∏", "https://youtube.com/watch?v=mechanics1", "–ò–∑—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–µ–ª", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–ú–µ—Ö–∞–Ω–∏–∫–∞", "pdf", "–ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞", "https://example.com/newton.pdf", "–¢—Ä–∏ –∑–∞–∫–æ–Ω–∞ –º–µ—Ö–∞–Ω–∏–∫–∏", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "video", "–ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏", "https://youtube.com/watch?v=thermo1", "–ó–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "video", "–ó–∞–∫–æ–Ω –û–º–∞", "https://youtube.com/watch?v=ohm1", "–û—Å–Ω–æ–≤—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–û–ø—Ç–∏–∫–∞", "pdf", "–ó–∞–∫–æ–Ω—ã –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è", "https://example.com/optics.pdf", "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–∫–∞", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–ê—Ç–æ–º–Ω–∞—è —Ñ–∏–∑–∏–∫–∞", "video", "–°—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ç–æ–º–∞", "https://youtube.com/watch?v=atom1", "–ú–æ–¥–µ–ª—å –∞—Ç–æ–º–∞ –ë–æ—Ä–∞", "ru"),
        ]
        
        for material in materials:
            await db.execute("""
                INSERT INTO materials (subject, topic, type, title, url, description, language)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, material)
        
        # Add physics tests
        tests = [
            ("–§–∏–∑–∏–∫–∞", "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∫–æ—Ä–æ—Å—Ç—å?", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è", "C", "–°–∫–æ—Ä–æ—Å—Ç—å - —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞ –≥–ª–∞—Å–∏—Ç:", "–¢–µ–ª–æ –¥–≤–∏–∂–µ—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ", "–¢–µ–ª–æ –ø–æ–∫–æ–∏—Ç—Å—è –∏–ª–∏ –¥–≤–∏–∂–µ—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–∏–ª", "–°–∏–ª–∞ —Ä–∞–≤–Ω–∞ –º–∞—Å—Å–µ –Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–∏–µ", "–î–µ–π—Å—Ç–≤–∏–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—é", "B", "–ó–∞–∫–æ–Ω –∏–Ω–µ—Ä—Ü–∏–∏", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∏–ª—ã:", "–ù—å—é—Ç–æ–Ω", "–î–∂–æ—É–ª—å", "–í–∞—Ç—Ç", "–ü–∞—Å–∫–∞–ª—å", "A", "–°–∏–ª–∞ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –Ω—å—é—Ç–æ–Ω–∞—Ö", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–ó–∞–∫–æ–Ω –û–º–∞ –¥–ª—è —É—á–∞—Å—Ç–∫–∞ —Ü–µ–ø–∏:", "U = I * R", "P = U * I", "A = U / R", "R = U + I", "A", "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é —Ç–æ–∫–∞ –Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ", "ru"),
            ("–§–∏–∑–∏–∫–∞", "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–∞—Å—Ç–æ—Ç–∞ –≤–æ–ª–Ω—ã?", "–î–ª–∏–Ω–∞ –≤–æ–ª–Ω—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ–±–∞–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ–ª–Ω—ã", "–ê–º–ø–ª–∏—Ç—É–¥–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π", "B", "–ß–∞—Å—Ç–æ—Ç–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ–±–∞–Ω–∏–π –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏", "ru"),
        ]
        
        for test in tests:
            await db.execute("""
                INSERT INTO tests (subject, question, option_a, option_b, option_c, option_d, correct_answer, explanation, language)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, test)
        
        # Add quests
        quests = [
            ("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–µ—Å—Ç", "–ü—Ä–æ–π–¥–∏ –æ–¥–∏–Ω —Ç–µ—Å—Ç –ø–æ —Ñ–∏–∑–∏–∫–µ", 50, "daily", 1, datetime.now().date(), (datetime.now() + timedelta(days=1)).date(), 1, "ru"),
            ("–ò–∑—É—á–∏ –º–µ—Ö–∞–Ω–∏–∫—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏ 3 –≤–∏–¥–µ–æ –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ", 100, "video", 3, datetime.now().date(), (datetime.now() + timedelta(days=7)).date(), 1, "ru"),
            ("–ú–∞—Å—Ç–µ—Ä —Ñ–∏–∑–∏–∫–∏", "–ù–∞–±–µ—Ä–∏ 1000 –±–∞–ª–ª–æ–≤", 200, "points", 1000, datetime.now().date(), (datetime.now() + timedelta(days=30)).date(), 1, "ru"),
            ("–ù–µ–¥–µ–ª—å–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω", "–ü—Ä–æ–π–¥–∏ 10 —Ç–µ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é", 150, "test", 10, datetime.now().date(), (datetime.now() + timedelta(days=7)).date(), 1, "ru"),
        ]
        
        for quest in quests:
            await db.execute("""
                INSERT INTO quests (title, description, reward_points, quest_type, target_count, start_date, end_date, is_active, language)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, quest)
        
        # Add schedule
        schedule_items = [
            (0, "09:00", "09:45", "–§–∏–∑–∏–∫–∞", "–ú–µ—Ö–∞–Ω–∏–∫–∞", "–ê—Å–µ–º –ò–±—Ä–∞–≥–∏–º–æ–≤–∞", "–ö–∞–±. 201", "–£—Ä–æ–∫ –ø–æ –∫–∏–Ω–µ–º–∞—Ç–∏–∫–µ", 1),
            (0, "10:00", "10:45", "–§–∏–∑–∏–∫–∞", "–ú–µ—Ö–∞–Ω–∏–∫–∞", "–ê—Å–µ–º –ò–±—Ä–∞–≥–∏–º–æ–≤–∞", "–ö–∞–±. 201", "–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á", 1),
            (1, "09:00", "09:45", "–§–∏–∑–∏–∫–∞", "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "–ê—Å–µ–º –ò–±—Ä–∞–≥–∏–º–æ–≤–∞", "–ö–∞–±. 201", "–ü–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∏", 1),
            (2, "11:00", "11:45", "–§–∏–∑–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–ê—Å–µ–º –ò–±—Ä–∞–≥–∏–º–æ–≤–∞", "–ö–∞–±. 201", "–ó–∞–∫–æ–Ω –û–º–∞", 1),
            (3, "14:00", "14:45", "–§–∏–∑–∏–∫–∞", "–û–ø—Ç–∏–∫–∞", "–ê—Å–µ–º –ò–±—Ä–∞–≥–∏–º–æ–≤–∞", "–ö–∞–±. 201", "–ó–∞–∫–æ–Ω—ã –æ—Ç—Ä–∞–∂–µ–Ω–∏—è", 1),
            (4, "10:00", "10:45", "–§–∏–∑–∏–∫–∞", "–ê—Ç–æ–º–Ω–∞—è —Ñ–∏–∑–∏–∫–∞", "–ê—Å–µ–º –ò–±—Ä–∞–≥–∏–º–æ–≤–∞", "–ö–∞–±. 201", "–°—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ç–æ–º–∞", 1),
        ]
        
        for schedule_item in schedule_items:
            await db.execute("""
                INSERT INTO schedule (day_of_week, time_start, time_end, subject, topic, teacher, classroom, description, is_active)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, schedule_item)
        
        # Add user progress (test completions, material views, etc.)
        for student in students:
            telegram_id = student[0]
            # Add some random test completions
            for _ in range(random.randint(5, 15)):
                test_id = random.randint(1, 5)
                score = random.randint(60, 100)
                completed_at = datetime.now() - timedelta(days=random.randint(1, 30))
                await db.execute("""
                    INSERT INTO user_progress (user_id, test_id, progress_type, completed_at, score)
                    VALUES (?, ?, 'test', ?, ?)
                """, (telegram_id, test_id, completed_at.isoformat(), score))
            
            # Add some material views
            for _ in range(random.randint(3, 8)):
                material_id = random.randint(1, 6)
                viewed_at = datetime.now() - timedelta(days=random.randint(1, 20))
                await db.execute("""
                    INSERT INTO user_progress (user_id, material_id, progress_type, completed_at)
                    VALUES (?, ?, 'material', ?)
                """, (telegram_id, material_id, viewed_at.isoformat()))
        
        await db.commit()
        print("‚úÖ Database populated with realistic test data!")
        
        # Show some stats
        async with db.execute("SELECT COUNT(*) FROM users") as cursor:
            user_count = await cursor.fetchone()
            print(f"üë• Users: {user_count[0]}")
        
        async with db.execute("SELECT COUNT(*) FROM tests") as cursor:
            test_count = await cursor.fetchone()
            print(f"üìù Tests: {test_count[0]}")
        
        async with db.execute("SELECT COUNT(*) FROM materials") as cursor:
            material_count = await cursor.fetchone()
            print(f"üìö Materials: {material_count[0]}")
        
        async with db.execute("SELECT COUNT(*) FROM user_progress") as cursor:
            progress_count = await cursor.fetchone()
            print(f"üìä Progress entries: {progress_count[0]}")

if __name__ == "__main__":
    asyncio.run(populate_database())
